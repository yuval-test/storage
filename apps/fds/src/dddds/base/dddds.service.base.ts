/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Dddds as PrismaDddds } from "@prisma/client";

export class DdddsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DdddsCountArgs, "select">): Promise<number> {
    return this.prisma.dddds.count(args);
  }

  async ddddsItems<T extends Prisma.DdddsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DdddsFindManyArgs>
  ): Promise<PrismaDddds[]> {
    return this.prisma.dddds.findMany<Prisma.DdddsFindManyArgs>(args);
  }
  async dddds<T extends Prisma.DdddsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DdddsFindUniqueArgs>
  ): Promise<PrismaDddds | null> {
    return this.prisma.dddds.findUnique(args);
  }
  async createDddds<T extends Prisma.DdddsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DdddsCreateArgs>
  ): Promise<PrismaDddds> {
    return this.prisma.dddds.create<T>(args);
  }
  async updateDddds<T extends Prisma.DdddsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DdddsUpdateArgs>
  ): Promise<PrismaDddds> {
    return this.prisma.dddds.update<T>(args);
  }
  async deleteDddds<T extends Prisma.DdddsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DdddsDeleteArgs>
  ): Promise<PrismaDddds> {
    return this.prisma.dddds.delete(args);
  }
}
