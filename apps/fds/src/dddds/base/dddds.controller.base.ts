/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DdddsService } from "../dddds.service";
import { DdddsCreateInput } from "./DdddsCreateInput";
import { Dddds } from "./Dddds";
import { DdddsFindManyArgs } from "./DdddsFindManyArgs";
import { DdddsWhereUniqueInput } from "./DdddsWhereUniqueInput";
import { DdddsUpdateInput } from "./DdddsUpdateInput";

export class DdddsControllerBase {
  constructor(protected readonly service: DdddsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dddds })
  async createDddds(@common.Body() data: DdddsCreateInput): Promise<Dddds> {
    return await this.service.createDddds({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dddds] })
  @ApiNestedQuery(DdddsFindManyArgs)
  async ddddsItems(@common.Req() request: Request): Promise<Dddds[]> {
    const args = plainToClass(DdddsFindManyArgs, request.query);
    return this.service.ddddsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dddds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dddds(
    @common.Param() params: DdddsWhereUniqueInput
  ): Promise<Dddds | null> {
    const result = await this.service.dddds({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dddds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDddds(
    @common.Param() params: DdddsWhereUniqueInput,
    @common.Body() data: DdddsUpdateInput
  ): Promise<Dddds | null> {
    try {
      return await this.service.updateDddds({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dddds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDddds(
    @common.Param() params: DdddsWhereUniqueInput
  ): Promise<Dddds | null> {
    try {
      return await this.service.deleteDddds({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
