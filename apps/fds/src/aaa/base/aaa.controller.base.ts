/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AaaService } from "../aaa.service";
import { AaaCreateInput } from "./AaaCreateInput";
import { Aaa } from "./Aaa";
import { AaaFindManyArgs } from "./AaaFindManyArgs";
import { AaaWhereUniqueInput } from "./AaaWhereUniqueInput";
import { AaaUpdateInput } from "./AaaUpdateInput";

export class AaaControllerBase {
  constructor(protected readonly service: AaaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Aaa })
  async createAaa(@common.Body() data: AaaCreateInput): Promise<Aaa> {
    return await this.service.createAaa({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Aaa] })
  @ApiNestedQuery(AaaFindManyArgs)
  async aaas(@common.Req() request: Request): Promise<Aaa[]> {
    const args = plainToClass(AaaFindManyArgs, request.query);
    return this.service.aaas({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Aaa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aaa(@common.Param() params: AaaWhereUniqueInput): Promise<Aaa | null> {
    const result = await this.service.aaa({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Aaa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAaa(
    @common.Param() params: AaaWhereUniqueInput,
    @common.Body() data: AaaUpdateInput
  ): Promise<Aaa | null> {
    try {
      return await this.service.updateAaa({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Aaa })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAaa(
    @common.Param() params: AaaWhereUniqueInput
  ): Promise<Aaa | null> {
    try {
      return await this.service.deleteAaa({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
