/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Aaa } from "./Aaa";
import { AaaCountArgs } from "./AaaCountArgs";
import { AaaFindManyArgs } from "./AaaFindManyArgs";
import { AaaFindUniqueArgs } from "./AaaFindUniqueArgs";
import { DeleteAaaArgs } from "./DeleteAaaArgs";
import { AaaService } from "../aaa.service";
@graphql.Resolver(() => Aaa)
export class AaaResolverBase {
  constructor(protected readonly service: AaaService) {}

  async _aaasMeta(
    @graphql.Args() args: AaaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Aaa])
  async aaas(@graphql.Args() args: AaaFindManyArgs): Promise<Aaa[]> {
    return this.service.aaas(args);
  }

  @graphql.Query(() => Aaa, { nullable: true })
  async aaa(@graphql.Args() args: AaaFindUniqueArgs): Promise<Aaa | null> {
    const result = await this.service.aaa(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Aaa)
  async deleteAaa(@graphql.Args() args: DeleteAaaArgs): Promise<Aaa | null> {
    try {
      return await this.service.deleteAaa(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
