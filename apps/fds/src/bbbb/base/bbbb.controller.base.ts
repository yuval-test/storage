/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BbbbService } from "../bbbb.service";
import { BbbbCreateInput } from "./BbbbCreateInput";
import { Bbbb } from "./Bbbb";
import { BbbbFindManyArgs } from "./BbbbFindManyArgs";
import { BbbbWhereUniqueInput } from "./BbbbWhereUniqueInput";
import { BbbbUpdateInput } from "./BbbbUpdateInput";

export class BbbbControllerBase {
  constructor(protected readonly service: BbbbService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bbbb })
  async createBbbb(@common.Body() data: BbbbCreateInput): Promise<Bbbb> {
    return await this.service.createBbbb({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bbbb] })
  @ApiNestedQuery(BbbbFindManyArgs)
  async bbbbs(@common.Req() request: Request): Promise<Bbbb[]> {
    const args = plainToClass(BbbbFindManyArgs, request.query);
    return this.service.bbbbs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bbbb })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bbbb(
    @common.Param() params: BbbbWhereUniqueInput
  ): Promise<Bbbb | null> {
    const result = await this.service.bbbb({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bbbb })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBbbb(
    @common.Param() params: BbbbWhereUniqueInput,
    @common.Body() data: BbbbUpdateInput
  ): Promise<Bbbb | null> {
    try {
      return await this.service.updateBbbb({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bbbb })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBbbb(
    @common.Param() params: BbbbWhereUniqueInput
  ): Promise<Bbbb | null> {
    try {
      return await this.service.deleteBbbb({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
