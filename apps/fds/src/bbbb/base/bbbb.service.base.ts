/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Bbbb as PrismaBbbb } from "@prisma/client";

export class BbbbServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BbbbCountArgs, "select">): Promise<number> {
    return this.prisma.bbbb.count(args);
  }

  async bbbbs<T extends Prisma.BbbbFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BbbbFindManyArgs>
  ): Promise<PrismaBbbb[]> {
    return this.prisma.bbbb.findMany<Prisma.BbbbFindManyArgs>(args);
  }
  async bbbb<T extends Prisma.BbbbFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BbbbFindUniqueArgs>
  ): Promise<PrismaBbbb | null> {
    return this.prisma.bbbb.findUnique(args);
  }
  async createBbbb<T extends Prisma.BbbbCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BbbbCreateArgs>
  ): Promise<PrismaBbbb> {
    return this.prisma.bbbb.create<T>(args);
  }
  async updateBbbb<T extends Prisma.BbbbUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BbbbUpdateArgs>
  ): Promise<PrismaBbbb> {
    return this.prisma.bbbb.update<T>(args);
  }
  async deleteBbbb<T extends Prisma.BbbbDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BbbbDeleteArgs>
  ): Promise<PrismaBbbb> {
    return this.prisma.bbbb.delete(args);
  }
}
