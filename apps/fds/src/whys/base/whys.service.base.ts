/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Whys as PrismaWhys } from "@prisma/client";

export class WhysServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WhysCountArgs, "select">): Promise<number> {
    return this.prisma.whys.count(args);
  }

  async whysItems<T extends Prisma.WhysFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhysFindManyArgs>
  ): Promise<PrismaWhys[]> {
    return this.prisma.whys.findMany<Prisma.WhysFindManyArgs>(args);
  }
  async whys<T extends Prisma.WhysFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhysFindUniqueArgs>
  ): Promise<PrismaWhys | null> {
    return this.prisma.whys.findUnique(args);
  }
  async createWhys<T extends Prisma.WhysCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhysCreateArgs>
  ): Promise<PrismaWhys> {
    return this.prisma.whys.create<T>(args);
  }
  async updateWhys<T extends Prisma.WhysUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhysUpdateArgs>
  ): Promise<PrismaWhys> {
    return this.prisma.whys.update<T>(args);
  }
  async deleteWhys<T extends Prisma.WhysDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WhysDeleteArgs>
  ): Promise<PrismaWhys> {
    return this.prisma.whys.delete(args);
  }
}
