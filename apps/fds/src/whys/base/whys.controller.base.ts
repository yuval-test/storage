/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WhysService } from "../whys.service";
import { WhysCreateInput } from "./WhysCreateInput";
import { Whys } from "./Whys";
import { WhysFindManyArgs } from "./WhysFindManyArgs";
import { WhysWhereUniqueInput } from "./WhysWhereUniqueInput";
import { WhysUpdateInput } from "./WhysUpdateInput";

export class WhysControllerBase {
  constructor(protected readonly service: WhysService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Whys })
  async createWhys(@common.Body() data: WhysCreateInput): Promise<Whys> {
    return await this.service.createWhys({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Whys] })
  @ApiNestedQuery(WhysFindManyArgs)
  async whysItems(@common.Req() request: Request): Promise<Whys[]> {
    const args = plainToClass(WhysFindManyArgs, request.query);
    return this.service.whysItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Whys })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async whys(
    @common.Param() params: WhysWhereUniqueInput
  ): Promise<Whys | null> {
    const result = await this.service.whys({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Whys })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWhys(
    @common.Param() params: WhysWhereUniqueInput,
    @common.Body() data: WhysUpdateInput
  ): Promise<Whys | null> {
    try {
      return await this.service.updateWhys({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Whys })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWhys(
    @common.Param() params: WhysWhereUniqueInput
  ): Promise<Whys | null> {
    try {
      return await this.service.deleteWhys({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
