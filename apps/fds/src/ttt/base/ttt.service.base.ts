/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Ttt as PrismaTtt } from "@prisma/client";

export class TttServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TttCountArgs, "select">): Promise<number> {
    return this.prisma.ttt.count(args);
  }

  async ttts<T extends Prisma.TttFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TttFindManyArgs>
  ): Promise<PrismaTtt[]> {
    return this.prisma.ttt.findMany<Prisma.TttFindManyArgs>(args);
  }
  async ttt<T extends Prisma.TttFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TttFindUniqueArgs>
  ): Promise<PrismaTtt | null> {
    return this.prisma.ttt.findUnique(args);
  }
  async createTtt<T extends Prisma.TttCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TttCreateArgs>
  ): Promise<PrismaTtt> {
    return this.prisma.ttt.create<T>(args);
  }
  async updateTtt<T extends Prisma.TttUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TttUpdateArgs>
  ): Promise<PrismaTtt> {
    return this.prisma.ttt.update<T>(args);
  }
  async deleteTtt<T extends Prisma.TttDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TttDeleteArgs>
  ): Promise<PrismaTtt> {
    return this.prisma.ttt.delete(args);
  }
}
